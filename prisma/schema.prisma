// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// <!-- npx prisma migrate dev --name [migration_name] -->

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  user
  admin
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // relation to ProductImage
  ProductImage ProductImage[]

  //relation to OrderItem
  OrderItem OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // relation to Product
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relaciones
  address UserAddress?
  Order   Order[]
}

model Countries {
  id   String @id
  name String

  // relaciones
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // relaciones
  countryId String
  country   Countries @relation(fields: [countryId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@index([userId])
}

// Order

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  // relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderItems    OrderItem[]
  OrderAddress  OrderAddress?
  UserAddress   UserAddress?  @relation(fields: [userAddressId], references: [id])
  userAddressId String?

  transactionId String? //el id que nos da el proveedor de pagos
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  size     Size
  price    Float

  // relaciones
  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

// Esta direccion no es la misma que la del usuario
model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  countryId String
  country   Countries @relation(fields: [countryId], references: [id])

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
